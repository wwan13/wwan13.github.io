{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/1007/","result":{"data":{"site":{"siteMetadata":{"title":"Wan.log","siteUrl":"https://wwan13.github.io","thumbnail":"/thumbnails/tech-blog-thumbnail.png"}},"markdownRemark":{"id":"e339ec8a-5e75-5027-b558-929360025c94","tableOfContents":"<ul>\n<li>\n<p><a href=\"#%EC%B2%AB-%EB%B2%88%EC%A7%B8-%EB%B0%A9%EB%B2%95\">첫 번째 방법</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98-%EA%B8%B0%EB%B0%98-%EC%BB%A8%ED%8A%B8%EB%A1%A4%EB%9F%AC\">어노테이션 기반 컨트롤러</a></p>\n<ul>\n<li><a href=\"#%EA%B7%9C%EC%B9%99\">규칙</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#dispatcher-sorvlet\">Dispatcher Sorvlet</a></p>\n<ul>\n<li><a href=\"#%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EC%8A%A4%EC%BA%94\">컴포넌트 스캔</a></li>\n<li><a href=\"#%ED%95%B8%EB%93%A4%EB%9F%AC-%EB%A7%A4%ED%95%91\">핸들러 매핑</a></li>\n<li><a href=\"#%ED%95%B8%EB%93%A4%EB%9F%AC%EA%B0%80-%ED%95%84%EC%9A%94%EB%A1%9C-%ED%95%98%EB%8A%94-%EC%9D%B8%EC%9E%90-%ED%8C%8C%EC%95%85-%EB%B0%8F-%EC%A0%9C%EA%B3%B5\">핸들러가 필요로 하는 인자 파악 및 제공</a></li>\n<li><a href=\"#%EC%9A%94%EC%B2%AD-%EC%B2%98%EB%A6%AC\">요청 처리</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B0\">마치며</a></p>\n</li>\n</ul>","excerpt":"학부 4학년…","html":"<p>학부 4학년 1학기 ‘네트워크 프로그래밍’의 텀프로젝트로 ‘소켓 통신을 이용한 자판기 프로그램’을 구현해야만 했습니다.</p>\n<p>함께 한 친구에게 “편하게 비즈니스 로직만 짜게 해줄게!” 라는 약속을 한 뒤, 소켓 메세지를 종류에 따라 처리할 수 있는 일종의 <strong>소켓 통신 프레임워크</strong>를 구현한 이야기를 공유해 드리겠습니다.</p>\n<blockquote>\n<p>본 포스팅은 프레임워크 구축을 다루는 포스팅으로, 소켓 통신과 관련한 이야기는 최소화 하겠습니다.</p>\n</blockquote>\n<br/>\n<h2 id=\"첫-번째-방법\" style=\"position:relative;\">첫 번째 방법<a href=\"#%EC%B2%AB-%EB%B2%88%EC%A7%B8-%EB%B0%A9%EB%B2%95\" aria-label=\"첫 번째 방법 permalink\" class=\"heading-anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RequiredArgsConstructor</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BaseUseCase</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">ObjectMapper</span> objectMapper<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">SocketResponse</span> <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">core</span><span class=\"token punctuation\">(</span><span class=\"token function\">casting</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">T</span> <span class=\"token function\">casting</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> objectMapper<span class=\"token punctuation\">.</span><span class=\"token function\">convertValue</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token function\">support</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">SocketResponse</span> <span class=\"token function\">core</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">support</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Getter</span>\n<span class=\"token annotation punctuation\">@RequiredArgsConstructor</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">ProductRequestType</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">RequestType</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token function\">ADD_ITEM</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"PRODUCT_ADD_ITEM\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"addItemUseCase\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">PURCHASE_ITEM</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"PRODUCT_PURCHASE_ITEM\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"purchaseItemUseCase\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> useCaseName<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>처음 시도한 방법은 위와 같았습니다.</p>\n<p>소켓 메세지로 전달된 데이터를 처리하는 추상 클래스 <code class=\"language-text\">BaseUseCase</code>를 구현한 뒤, 각 UseCase들은 이 BaseUseCase를 상속받아 추상 메소드인 <code class=\"language-text\">core()</code>만 구현하면 되었습니다.</p>\n<p>이 UseCase들은 enum타입의 RequestType에 등록하여 적절한 UseCase를 찾아 이를 호출하는 것으로 소켓 메세지를 처리하였습니다.</p>\n<p>크게 불편하진 않았지만, 스프링 개발자인 친구에게 더욱 익숙한 방법으로 제공하고자 새로운 방법을 찾아 나섰습니다.</p>\n<br/>\n<h2 id=\"어노테이션-기반-컨트롤러\" style=\"position:relative;\">어노테이션 기반 컨트롤러<a href=\"#%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98-%EA%B8%B0%EB%B0%98-%EC%BB%A8%ED%8A%B8%EB%A1%A4%EB%9F%AC\" aria-label=\"어노테이션 기반 컨트롤러 permalink\" class=\"heading-anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RestController</span>\n<span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HomeController</span> <span class=\"token punctuation\">{</span>\n    \n    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/home\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">home</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"home\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>흔히 http 요청을 처리할때 사용하는 컨트롤러의 모습입니다.</p>\n<p>소켓 메세지 핸들러가 이러한 모습으로 메세지를 처리한다면 동료 개발자가 더욱 익숙한 환경에서 비즈니스 로직에 더욱 집중할 수 있을 것입니다.</p>\n<br/>\n<h3 id=\"규칙\" style=\"position:relative;\">규칙<a href=\"#%EA%B7%9C%EC%B9%99\" aria-label=\"규칙 permalink\" class=\"heading-anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>이러한 컨트롤러의 형태를 갖추기 위해 사전에 다음과 같은 규칙들을 정의하였습니다.</p>\n<ul>\n<li>각 요청은 <code class=\"language-text\">key</code>로 구분하며 각 요청 키는 <code class=\"language-text\">EXAMPLE_KEY</code>와 같이 대문자와 <code class=\"language-text\">_</code>를 섞어 사용한다.</li>\n<li>요청 키 에는 <code class=\"language-text\">EXAMPLE_KEY_{id}</code>와 같이 변수를 포함할 수 있다.</li>\n<li>요청에 필요한 데이터는 <code class=\"language-text\">body</code>에 담아 전달한다.</li>\n<li>전체 요청은 다음과 같은 json 형식의 문자열로 전달되며, 응답 또한 같은 형태로 전달된다.\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"key\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"EXAMPLE_KEY\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"body\"</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"name\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"kim\"</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<br/>\n<p>이 규칙 따르는 다음과 같은 모습의 컨트롤러를 만들고자 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@SocketController</span>\n<span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>ket <span class=\"token operator\">=</span> <span class=\"token string\">\"ITEM\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ItemController</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>key <span class=\"token operator\">=</span> <span class=\"token string\">\"MODIFY_{itemId}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">SocketResponse</span> <span class=\"token function\">modifyItem</span><span class=\"token punctuation\">(</span>\n            <span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">ModifyItemRequest</span> request<span class=\"token punctuation\">,</span>\n            <span class=\"token annotation punctuation\">@KeyParameter</span> <span class=\"token class-name\">Long</span> itemId\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">ModifyItemResponse</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ModifyItemResponse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"item\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">SocketResponse</span><span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>spring에서 제공하는 컨트롤러와 매우 유사한 모습을 기대할 수 있습니다.</p>\n<br/>\n<h2 id=\"dispatcher-sorvlet\" style=\"position:relative;\">Dispatcher Sorvlet<a href=\"#dispatcher-sorvlet\" aria-label=\"dispatcher sorvlet permalink\" class=\"heading-anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>위와 같은 구현을 위한 시나리오는 다음과 같습니다.</p>\n<ol>\n<li>프로젝트 실행(컨텍스트 로트)시 <code class=\"language-text\">@SocketController</code> <strong>스캔 후 핸들러 등록</strong></li>\n<li>소켓 요청 발생 시 요청과 일치하는 <strong>핸들러 매핑</strong></li>\n<li>핸들러가 필요로 하는 <strong>인자 파악 및 제공</strong></li>\n<li><strong>요청 처리</strong></li>\n<li>응답 전송</li>\n</ol>\n<p>이러한 과정들이 Dispatcher Servlet이 http 요청을 처리하는 방법과 유사하여 이 프레임워크의 이름을 <code class=\"language-text\">Dispatcher So(cket)rvlet</code>으로 짓게 되었습니다.</p>\n<br/>\n<h3 id=\"컴포넌트-스캔\" style=\"position:relative;\">컴포넌트 스캔<a href=\"#%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EC%8A%A4%EC%BA%94\" aria-label=\"컴포넌트 스캔 permalink\" class=\"heading-anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>선언한 컨트롤러를 등록하는 별도의 과정을 거치지 않기 때문에, 프로젝트 실행(컨텍스트 로트)과 동시에 핸들러들을 찾아 등록해주는 과정이 필요하였습니다.</p>\n<p>하지만 여기엔 몇 가지 조건과 이에 따르는 문제점이 있었습니다.</p>\n<p>여기엔 한가지 중요한 조건이 있었습니다.</p>\n<blockquote>\n<p>리플렉션을 이용해 메소드를 실행(<code class=\"language-text\">Method.invoke()</code>) 하기 위해선 인스턴스화 된 컨트롤러를 보유하고 있어야 한다.</p>\n</blockquote>\n<p><code class=\"language-text\">Class.newInstance()</code>를 이용하면 충족할 수 있는 간단한 조건이라 생각하였지만, 이로 인해 발생하는 여러가지 문제점과 마주하였습니다.</p>\n<ol>\n<li>각 컨트롤러들은 서로 다른 서비스 컴포넌트를 의존하고 있으며, 서비스들 또한 서로 다른 레포지토리를 의존한다.</li>\n<li>하나의 컨트롤러를 인스턴스화 하기 위해선 계층적으로 의존 관계에 엮여 있는 모든 컴포넌트를 인스턴스화 해야 한다.</li>\n<li>스프링이 모든 컴포넌트를 싱클톤으로 관리하려는 싱글톤 패턴에 어긋난다.</li>\n</ol>\n<p>모두 스프링이 개발자의 편의를 위해 제공하는 IoC, DI 등의 편의성 기능으로 인해 발생하는 문제였습니다.\n처음엔 스프링으로 인해 발생한 문제이다보니, 자바 코드 만으로 위 문제를 해결하고자 하였으나, 어떤 방법으로도 3번의 문제점을 피해갈 수 없었습니다.</p>\n<br/>\n<p>하지만 역으로 스프링의 도움을 받아보기로 하였습니다.</p>\n<p><code class=\"language-text\">@SocketController</code>에 <code class=\"language-text\">@Component</code>를 추가해 컨트롤러를 컴포넌트로 등록하고, 리플렉션으로 획득한 <strong>클래스 이름을 이용해 <code class=\"language-text\">ApplicationContext</code>에서 불러오는</strong> 방법을 이용해 생각보다 간단히 해결할 수 있었습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DefaultRequestHandlerScanner</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">RequestHandlerScanner</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">ComponentScanner</span> componentScanner<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">ApplicationContext</span> applicationContext<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">DefaultRequestHandlerScanner</span><span class=\"token punctuation\">(</span>\n            <span class=\"token class-name\">ComponentScanner</span> componentScanner<span class=\"token punctuation\">,</span>\n            <span class=\"token class-name\">ApplicationContext</span> applicationContext\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>componentScanner <span class=\"token operator\">=</span> componentScanner<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>applicationContext <span class=\"token operator\">=</span> applicationContext<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RequestHandlers</span> <span class=\"token function\">scan</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Class</span><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> controllerClasses <span class=\"token operator\">=</span> componentScanner\n                <span class=\"token punctuation\">.</span><span class=\"token function\">scanComponentsWithAnnotation</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SocketController</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">RequestHandler</span><span class=\"token punctuation\">></span></span> handlers <span class=\"token operator\">=</span> <span class=\"token function\">extractAllHandlers</span><span class=\"token punctuation\">(</span>controllerClasses<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RequestHandlers</span><span class=\"token punctuation\">(</span>handlers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">RequestHandler</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">extractAllHandlers</span><span class=\"token punctuation\">(</span>\n            <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Class</span><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> controllerClasses\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">RequestHandler</span><span class=\"token punctuation\">></span></span> handlers <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> controller <span class=\"token operator\">:</span> controllerClasses<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Object</span> registeredController <span class=\"token operator\">=</span> applicationContext\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">NamingConverter</span><span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCamelCase</span><span class=\"token punctuation\">(</span>controller<span class=\"token punctuation\">.</span><span class=\"token function\">getSimpleName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">extractHandlers</span><span class=\"token punctuation\">(</span>registeredController<span class=\"token punctuation\">,</span> handlers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> handlers<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">extractHandlers</span><span class=\"token punctuation\">(</span>\n            <span class=\"token class-name\">Object</span> controller<span class=\"token punctuation\">,</span>\n            <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">RequestHandler</span><span class=\"token punctuation\">></span></span> handlers\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span>controller<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredMethods</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">::</span><span class=\"token function\">isHandlerMethod</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>method <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token class-name\">RequestHandler</span> handler <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestHandler</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>controller<span class=\"token punctuation\">,</span> method<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    handlers<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isHandlerMethod</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Method</span> method<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> method<span class=\"token punctuation\">.</span><span class=\"token function\">isAnnotationPresent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RequestMapping</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a href=\"https://github.com/JaPangi/dispatcher-sorvlet/blob/main/src/main/java/io/wwan13/dispatchersorvlet/sorvlet/processor/ReflectionComponentScanner.java\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ComponentScanner 코드 보러 가기</a><br>\n<a href=\"https://github.com/JaPangi/dispatcher-sorvlet/blob/main/src/main/java/io/wwan13/dispatchersorvlet/sorvlet/RequestHandler.java\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">RequstHandler 코드 보러 가기</a></p>\n<p>이렇게 모든 핸들러들을 찾아 RequestHandlers에 등록할 수 있게 되었습니다.</p>\n<br/>\n<h3 id=\"핸들러-매핑\" style=\"position:relative;\">핸들러 매핑<a href=\"#%ED%95%B8%EB%93%A4%EB%9F%AC-%EB%A7%A4%ED%95%91\" aria-label=\"핸들러 매핑 permalink\" class=\"heading-anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>각각의 핸들러가 고유한 ‘요청 키’를 보유하고 있으며, 모든 핸들러가 RequestHandlers에 의해 관리되고 있기 빼문에 어렵지 않게 구현할 수 있었습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">record</span> <span class=\"token class-name\">RequestHandlers</span><span class=\"token punctuation\">(</span>\n        <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">RequestHandler</span><span class=\"token punctuation\">></span></span> handlers\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">RequestKeyMatcher</span> requestKeyMatcher <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RequestKeyMatcher</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RequestHandler</span> <span class=\"token function\">handlerMapping</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> requestKey<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> handlers<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>handler <span class=\"token operator\">-></span> requestKeyMatcher<span class=\"token punctuation\">.</span><span class=\"token function\">matches</span><span class=\"token punctuation\">(</span>handler<span class=\"token punctuation\">.</span><span class=\"token function\">requestKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> requestKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">findAny</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">orElseThrow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HandlerNotFoundException</span><span class=\"token punctuation\">(</span>requestKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a href=\"https://github.com/JaPangi/dispatcher-sorvlet/blob/main/src/main/java/io/wwan13/dispatchersorvlet/sorvlet/support/RequestKeyMatcher.java\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">RequestKeyMatcher 코드 보러 가기</a></p>\n<br/>\n<h3 id=\"핸들러가-필요로-하는-인자-파악-및-제공\" style=\"position:relative;\">핸들러가 필요로 하는 인자 파악 및 제공<a href=\"#%ED%95%B8%EB%93%A4%EB%9F%AC%EA%B0%80-%ED%95%84%EC%9A%94%EB%A1%9C-%ED%95%98%EB%8A%94-%EC%9D%B8%EC%9E%90-%ED%8C%8C%EC%95%85-%EB%B0%8F-%EC%A0%9C%EA%B3%B5\" aria-label=\"핸들러가 필요로 하는 인자 파악 및 제공 permalink\" class=\"heading-anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>이제 핸들러가 필요로 하는 데이터를 인자로 넘겨줘야 합니다.</p>\n<p>각 핸들러는 필요로 하는 정보의 종류도 다르고, 그 갯수도 다르기 때문에 <code class=\"language-text\">@KeyParameter</code>와 <code class=\"language-text\">@RequestBody</code>라는 어노테이션을 정의해 제공해야 하는 데이터의 종류를 구분하고, <code class=\"language-text\">ArgumentResolver</code>가 이를 해석하여 핸들러가 필요로 하는 정보를 인자로 제공합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DefaultArgumentsResolver</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ArgumentsResolver</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">KEY_PARAMETER_DELIMITER</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"_\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">KEY_PARAMETER_FORMAT</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"{%s}\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RequestHandler</span> handler<span class=\"token punctuation\">,</span> <span class=\"token class-name\">SocketRequest</span> request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Parameter</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> parameters <span class=\"token operator\">=</span> handler<span class=\"token punctuation\">.</span><span class=\"token function\">getHandlerParameters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> parametersLength <span class=\"token operator\">=</span> parameters<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arguments <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span>parametersLength<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> parametersLength<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Parameter</span> parameter <span class=\"token operator\">=</span> parameters<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            arguments<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">resolveArgument</span><span class=\"token punctuation\">(</span>parameter<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> arguments<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">resolveArgument</span><span class=\"token punctuation\">(</span>\n            <span class=\"token class-name\">Parameter</span> parameter<span class=\"token punctuation\">,</span>\n            <span class=\"token class-name\">SocketRequest</span> request<span class=\"token punctuation\">,</span>\n            <span class=\"token class-name\">RequestHandler</span> handler\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parameter<span class=\"token punctuation\">.</span><span class=\"token function\">isAnnotationPresent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RequestBody</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">resolveRequestBody</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">body</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> parameter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parameter<span class=\"token punctuation\">.</span><span class=\"token function\">isAnnotationPresent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">KeyParameter</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">resolveKeyParameter</span><span class=\"token punctuation\">(</span>handler<span class=\"token punctuation\">.</span><span class=\"token function\">requestKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">key</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> parameter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ResolveArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">resolveRequestBody</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> requestBody<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Parameter</span> parameter<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">TypeConverter</span><span class=\"token punctuation\">.</span><span class=\"token function\">convert</span><span class=\"token punctuation\">(</span>requestBody<span class=\"token punctuation\">,</span> parameter<span class=\"token punctuation\">.</span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">resolveKeyParameter</span><span class=\"token punctuation\">(</span>\n            <span class=\"token class-name\">String</span> registeredKey<span class=\"token punctuation\">,</span>\n            <span class=\"token class-name\">String</span> requestKey<span class=\"token punctuation\">,</span>\n            <span class=\"token class-name\">Parameter</span> parameter\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">String</span> keyParameter <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token constant\">KEY_PARAMETER_FORMAT</span><span class=\"token punctuation\">,</span> parameter<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> keyParameterIndex <span class=\"token operator\">=</span>\n                <span class=\"token class-name\">List</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>registeredKey<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token constant\">KEY_PARAMETER_DELIMITER</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>keyParameter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">String</span> givenValue <span class=\"token operator\">=</span> requestKey<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token constant\">KEY_PARAMETER_DELIMITER</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>keyParameterIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">TypeConverter</span><span class=\"token punctuation\">.</span><span class=\"token function\">convert</span><span class=\"token punctuation\">(</span>givenValue<span class=\"token punctuation\">,</span> parameter<span class=\"token punctuation\">.</span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br/>\n<h3 id=\"요청-처리\" style=\"position:relative;\">요청 처리<a href=\"#%EC%9A%94%EC%B2%AD-%EC%B2%98%EB%A6%AC\" aria-label=\"요청 처리 permalink\" class=\"heading-anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>이제 요청을 처리할 수 있는 모든 준비가 완료되었습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DispatcherSorvlet</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Logger</span> log <span class=\"token operator\">=</span> <span class=\"token class-name\">LoggerFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLogger</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DispatcherSorvlet</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">RequestHandlers</span> requestHandlers<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">ArgumentsResolver</span> argumentsResolver<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">ExceptionHandlers</span> exceptionHandlers<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">DispatcherSorvlet</span><span class=\"token punctuation\">(</span>\n            <span class=\"token class-name\">RequestHandlers</span> requestHandlers<span class=\"token punctuation\">,</span>\n            <span class=\"token class-name\">ArgumentsResolver</span> argumentsResolver<span class=\"token punctuation\">,</span>\n            <span class=\"token class-name\">ExceptionHandlers</span> exceptionHandlers\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>requestHandlers <span class=\"token operator\">=</span> requestHandlers<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>argumentsResolver <span class=\"token operator\">=</span> argumentsResolver<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>exceptionHandlers <span class=\"token operator\">=</span> exceptionHandlers<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">doService</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> socketMessage<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">SocketRequest</span> request <span class=\"token operator\">=</span> <span class=\"token class-name\">SocketMessageSerializer</span><span class=\"token punctuation\">.</span><span class=\"token function\">deserialize</span><span class=\"token punctuation\">(</span>socketMessage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token class-name\">RequestHandler</span> handler <span class=\"token operator\">=</span> requestHandlers<span class=\"token punctuation\">.</span><span class=\"token function\">handlerMapping</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">key</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arguments <span class=\"token operator\">=</span> argumentsResolver<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>handler<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Object</span> response <span class=\"token operator\">=</span> handler<span class=\"token punctuation\">.</span><span class=\"token function\">handle</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">return</span> <span class=\"token class-name\">SocketMessageSerializer</span><span class=\"token punctuation\">.</span><span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Exception</span> rootException <span class=\"token operator\">=</span> <span class=\"token function\">getRootException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token class-name\">ExceptionHandler</span> exceptionHandler <span class=\"token operator\">=</span> exceptionHandlers<span class=\"token punctuation\">.</span><span class=\"token function\">handlerMapping</span><span class=\"token punctuation\">(</span>rootException<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Object</span> response <span class=\"token operator\">=</span> exceptionHandler<span class=\"token punctuation\">.</span><span class=\"token function\">handle</span><span class=\"token punctuation\">(</span>rootException<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[{}] Exception raised ({})\"</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token constant\">MDC</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"client_id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> rootException<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">return</span> <span class=\"token class-name\">SocketMessageSerializer</span><span class=\"token punctuation\">.</span><span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Exception</span> <span class=\"token function\">getRootException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> exception<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>exception <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">InvocationTargetException</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span><span class=\"token punctuation\">)</span> exception<span class=\"token punctuation\">.</span><span class=\"token function\">getCause</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> exception<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>요청은 <code class=\"language-text\">DispatcherSorvlet</code>의 <code class=\"language-text\">doService()</code>에서 처리되며</p>\n<ol>\n<li>요청 역직렬화</li>\n<li>핸들러 매핑</li>\n<li>인자 파악 및 제공</li>\n<li>핸들러 실행</li>\n<li>반환값 직렬화</li>\n<li>클라이언트에게 응답 제공</li>\n</ol>\n<p>의 순서로 요청을 처리합니다.</p>\n<blockquote>\n<p>예외 처리 및 전체 코드는 <a href=\"https://github.com/JaPangi/dispatcher-sorvlet\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">깃허브 저장소</a>를 참고해 주세요.</p>\n</blockquote>\n<br/>\n<h2 id=\"마치며\" style=\"position:relative;\">마치며<a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B0\" aria-label=\"마치며 permalink\" class=\"heading-anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>이제 위에서 계획한 예제와 같이 어노테이션 선언만으로 소켓 요청을 처리할 수 있게 되었습니다.</p>\n<p>또한 스프링이 제공하는 @Controller와 유사한 모습으로 동료 개발자에게 보다 편한 개발 경험을 제공할 수 있었습니다.</p>","fields":{"slug":"/1007/"},"frontmatter":{"title":"어노테이션 기반 컨트롤러를 구현하는 방법.","date":"2024-06-20T00:00:00.000Z","description":"dispatcher-sorvlet 개발 이야기","tags":["Tech"],"thumbnail":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#88a8c8","images":{"fallback":{"src":"/static/f694aa639304706937001fd63bf8fa20/8058b/thumbnail.png","srcSet":"/static/f694aa639304706937001fd63bf8fa20/52057/thumbnail.png 240w,\n/static/f694aa639304706937001fd63bf8fa20/b380a/thumbnail.png 480w,\n/static/f694aa639304706937001fd63bf8fa20/8058b/thumbnail.png 960w","sizes":"(min-width: 960px) 960px, 100vw"},"sources":[{"srcSet":"/static/f694aa639304706937001fd63bf8fa20/226ed/thumbnail.webp 240w,\n/static/f694aa639304706937001fd63bf8fa20/a1501/thumbnail.webp 480w,\n/static/f694aa639304706937001fd63bf8fa20/55375/thumbnail.webp 960w","type":"image/webp","sizes":"(min-width: 960px) 960px, 100vw"}]},"width":960,"height":720}}}}},"previous":{"fields":{"slug":"/1006/"},"frontmatter":{"title":"복잡한 Spring Configuration을 더욱 쉽게 관리하기. (2)"}},"next":{"fields":{"slug":"/1008/"},"frontmatter":{"title":"API 문서 배포를 자동화 하기."}}},"pageContext":{"id":"e339ec8a-5e75-5027-b558-929360025c94","previousPostId":"5fd8da91-f0b7-5a05-a814-12a35a47fb3e","nextPostId":"5647f79b-95c6-5bc1-b0b2-da126dcac053"}},"staticQueryHashes":["2260143708","2538111481","658623446","984448874"],"slicesMap":{}}