{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/1003/","result":{"data":{"site":{"siteMetadata":{"title":"Wan.log","siteUrl":"https://wwan13.github.io","thumbnail":"/thumbnails/tech-blog-thumbnail.png"}},"markdownRemark":{"id":"1ca6a5e1-d63b-583d-bfcb-aad0cbdff23b","tableOfContents":"<ul>\n<li>\n<p><a href=\"#spring-security-%EC%97%86%EC%9D%B4-jwt-%EC%9D%B8%EC%A6%9D%EC%9D%B8%EA%B0%80-%EA%B5%AC%ED%98%84-%ED%95%B4%EB%B3%B4%EA%B8%B0\">Spring Security 없이 JWT 인증/인가 구현 해보기</a></p>\n<ul>\n<li><a href=\"#tokengenerator\">TokenGenerator</a></li>\n<li><a href=\"#decodetokenfilter\">DecodeTokenFilter</a></li>\n<li><a href=\"#authenticationfilter\">AuthenticationFilter</a></li>\n<li><a href=\"#authfilterexceptionhandler\">AuthFilterExceptionHandler</a></li>\n<li><a href=\"#argumentresolver\">ArgumentResolver</a></li>\n<li><a href=\"#%EC%84%B1%EB%8A%A5-%EC%B8%A1%EC%A0%95\">성능 측정</a></li>\n<li><a href=\"#%EB%B2%84%EC%A0%84--%EC%9D%98%EC%A1%B4%EC%84%B1\">버전 &#x26; 의존성</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B0\">마치며</a></p>\n</li>\n</ul>","excerpt":"지금까지 Spring 프로젝트에서 인증/인가를 구현할 때 당연하게 를 사용하였습니다. 이번 프로젝트에서는 멀티모듈을 선택하였고 여기서 문제가 발생하였습니다. 저는 실행 가능한  모듈과, jwt…","html":"<p>지금까지 Spring 프로젝트에서 인증/인가를 구현할 때 당연하게 <code class=\"language-text\">Spring Security</code>를 사용하였습니다.</p>\n<p>이번 프로젝트에서는 멀티모듈을 선택하였고 여기서 문제가 발생하였습니다. 저는 실행 가능한 <code class=\"language-text\">api</code> 모듈과, jwt 등 인증, 인가에 필요한 로직을 담고 있는 <code class=\"language-text\">security</code> 모듈을 분리하였습니다. <code class=\"language-text\">security</code>모듈에 모든 인증/인가의 책임이 있다 보니 <code class=\"language-text\">Spring Security</code> 의존성을 <code class=\"language-text\">security</code>모듈만 가지고 이를 사용하는 <code class=\"language-text\">api</code>모듈 에서는 <code class=\"language-text\">Spring Security</code> 의존성을 갖지 않기를 원했습니다.</p>\n<p>하지만 요청 별 권한 설정을 이유로 각 <code class=\"language-text\">api</code>모듈도 필연적으로 <code class=\"language-text\">Spring Security</code>의존성을 가질 수 밖에 없었습니다. 그래서 <code class=\"language-text\">api</code>모듈 들의 불필요한 <code class=\"language-text\">Spring Security</code>의존성을 <strong>제거</strong>하고자 직접 인증/인가를 구현하고자 하였습니다.</p>\n<br>\n<h2 id=\"spring-security-없이-jwt-인증인가-구현-해보기\" style=\"position:relative;\">Spring Security 없이 JWT 인증/인가 구현 해보기<a href=\"#spring-security-%EC%97%86%EC%9D%B4-jwt-%EC%9D%B8%EC%A6%9D%EC%9D%B8%EA%B0%80-%EA%B5%AC%ED%98%84-%ED%95%B4%EB%B3%B4%EA%B8%B0\" aria-label=\"spring security 없이 jwt 인증인가 구현 해보기 permalink\" class=\"heading-anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<blockquote>\n<p>본 포스팅은 <code class=\"language-text\">Spring Security</code>를 사용하지 않고 인증/인가를 구현하는 것에 초점을 맞춘 글로, <code class=\"language-text\">JWT</code>에 대한 구현과 설명은 최소화하겠습니다.</p>\n</blockquote>\n<br>\n<p>직접 구현한 인증/인가는 다음과 같이 진행됩니다.</p>\n<ol>\n<li>유저의 이메일(혹은 id), 권한 정보를 가진 JWT access token 발급</li>\n<li><code class=\"language-text\">Authorization</code> 헤더에 토큰이 담긴 API 요청 발생</li>\n<li>인증 토큰 해석</li>\n<li>요청 내용과 사용자의 권한에 따라 접근 가능 여부 판단</li>\n<li>컨트롤러로 요청한 유저의 이메일 제공</li>\n</ol>\n<br>\n<h3 id=\"tokengenerator\" style=\"position:relative;\">TokenGenerator<a href=\"#tokengenerator\" aria-label=\"tokengenerator permalink\" class=\"heading-anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>jwt를 이용한 TokenGenerator 입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Component</span>  \n<span class=\"token annotation punctuation\">@RequiredArgsConstructor</span>  \n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TokenGenerator</span> <span class=\"token punctuation\">{</span>  \n  \n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">CLAIM_NAME_TYPE</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"type\"</span><span class=\"token punctuation\">;</span>  \n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">CLAIM_NAME_ROLE</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"role\"</span><span class=\"token punctuation\">;</span>  \n  \n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">JwtProperties</span> jwtProperties<span class=\"token punctuation\">;</span>  \n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Key</span> key<span class=\"token punctuation\">;</span>  \n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">DateTimePicker</span> dateTimePicker<span class=\"token punctuation\">;</span>  \n  \n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">generate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TokenType</span> type<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TokenClaims</span> claims<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n\t\t<span class=\"token class-name\">LocalDateTime</span> now <span class=\"token operator\">=</span> dateTimePicker<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t\t<span class=\"token class-name\">LocalDateTime</span> expiration <span class=\"token operator\">=</span> now<span class=\"token punctuation\">.</span><span class=\"token function\">plusSeconds</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">.</span><span class=\"token function\">getValidityInSeconds</span><span class=\"token punctuation\">(</span>jwtProperties<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  \n\t<span class=\"token keyword\">return</span> <span class=\"token class-name\">Jwts</span><span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  \n\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">setSubject</span><span class=\"token punctuation\">(</span>claims<span class=\"token punctuation\">.</span><span class=\"token function\">userEmail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  \n\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">setIssuedAt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DateTimeUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">toDate</span><span class=\"token punctuation\">(</span>now<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  \n\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">setExpiration</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DateTimeUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">toDate</span><span class=\"token punctuation\">(</span>expiration<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  \n\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">claim</span><span class=\"token punctuation\">(</span><span class=\"token constant\">CLAIM_NAME_TYPE</span><span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  \n\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">claim</span><span class=\"token punctuation\">(</span><span class=\"token constant\">CLAIM_NAME_ROLE</span><span class=\"token punctuation\">,</span> claims<span class=\"token punctuation\">.</span><span class=\"token function\">role</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  \n\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">signWith</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>  \n\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">compact</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t<span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>로그인한 사용자의 이메일, 권한 정보, 만료 시간을 담은 토큰을 발급합니다.</p>\n<br>\n<h3 id=\"decodetokenfilter\" style=\"position:relative;\">DecodeTokenFilter<a href=\"#decodetokenfilter\" aria-label=\"decodetokenfilter permalink\" class=\"heading-anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>인증 토큰이 담긴 요청이 발생하면 그 토큰을 해석해야 합니다.</p>\n<p>많은 jwt 관련 강의나 블로그에서는 이 과정에서 해석한 인증 정보를 <code class=\"language-text\">Security Context Holder</code>에 저장한 뒤 필요한 곳에서 인증 정보를 불러올 수 있도록 구현되어 있습니다.</p>\n<p>하지만 저는 <code class=\"language-text\">Spring Security</code>를 사용하지 않기 때문에 이 또한 사용할 수 없습니다..<br>\n따라서 다음 필터 혹은 컨트롤러로 인증 정보를 전달하기 위해 <code class=\"language-text\">HttpServletRequest</code>의 <code class=\"language-text\">attribute</code>에 해석한 토큰의 정보를 담아 전달하고 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RequiredArgsConstructor</span>  \n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DecodeTokenFilter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">OncePerRequestFilter</span> <span class=\"token punctuation\">{</span>  \n  \n    <span class=\"token comment\">/* constants */</span> \n  \n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">TokenDecoder</span> tokenDecoder<span class=\"token punctuation\">;</span>  \n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">TokenValidator</span> tokenValidator<span class=\"token punctuation\">;</span>  \n  \n    <span class=\"token annotation punctuation\">@Override</span>  \n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doFilterInternal</span><span class=\"token punctuation\">(</span>  \n            <span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span>  \n            <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">,</span>  \n            <span class=\"token class-name\">FilterChain</span> filterChain  \n    <span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>  \n  \n        <span class=\"token function\">decodeToken</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ifPresent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>tokenClaims<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>  \n            request<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token constant\">USER_EMAIL_ATTRIBUTE_KEY</span><span class=\"token punctuation\">,</span> tokenClaims<span class=\"token punctuation\">.</span><span class=\"token function\">userEmail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n            request<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token constant\">USER_ROLE_ATTRIBUTE_KEY</span><span class=\"token punctuation\">,</span> tokenClaims<span class=\"token punctuation\">.</span><span class=\"token function\">role</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  \n        filterChain<span class=\"token punctuation\">.</span><span class=\"token function\">doFilter</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n  \n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TokenClaims</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">decodeToken</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n        <span class=\"token class-name\">String</span> bearerToken <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getHeader</span><span class=\"token punctuation\">(</span><span class=\"token constant\">AUTHORIZATION_HEADER</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">hasToken</span><span class=\"token punctuation\">(</span>bearerToken<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span><span class=\"token function\">isValidTokenPrefix</span><span class=\"token punctuation\">(</span>bearerToken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n            <span class=\"token keyword\">return</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token punctuation\">}</span>  \n  \n        <span class=\"token class-name\">String</span> token <span class=\"token operator\">=</span> bearerToken<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token constant\">AUTHENTICATION_TOKEN_START_INDEX</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        tokenValidator<span class=\"token punctuation\">.</span><span class=\"token function\">validateToken</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>tokenDecoder<span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n  \n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">hasToken</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> bearerToken<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">hasText</span><span class=\"token punctuation\">(</span>bearerToken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n  \n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isValidTokenPrefix</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> bearerToken<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n        <span class=\"token keyword\">return</span> bearerToken<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token constant\">AUTHENTICATION_TOKEN_PREFIX</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">decodeToken()</code> \b을 먼저 살펴보면, 헤더에서 토큰을 불러와 토큰이 존재하지 않거나 prefix가 올바르지 않다면 <code class=\"language-text\">Optional.empty()</code>를, 올바른 토큰을 제공하고 있다면 <code class=\"language-text\">Optional</code>에 해석한 토큰의 정보를 담아 반환합니다.</p>\n<p>이후 인증 정보가 존재하는 경우에만 <code class=\"language-text\">attribute</code>에 사용자의 이메일과, 권한을 담아 다음 필터로 전달합니다.</p>\n<br>\n<h3 id=\"authenticationfilter\" style=\"position:relative;\">AuthenticationFilter<a href=\"#authenticationfilter\" aria-label=\"authenticationfilter permalink\" class=\"heading-anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><code class=\"language-text\">DecodeTokenFilter</code>를 통해 요청에 대한 인증 정보를 전달받았습니다.<br>\n이제 요청받은 <code class=\"language-text\">method</code>, <code class=\"language-text\">uri</code> 그리고 사용자의 권한을 비교해 접근 가능한 요청인지 확인해야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RequiredArgsConstructor</span>  \n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AuthenticationFilter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">OncePerRequestFilter</span> <span class=\"token punctuation\">{</span>  \n  \n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">USER_ROLE_ATTRIBUTE_KEY</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"userRole\"</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">EMPTY_ROLE</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"ROLE_EMPTY\"</span><span class=\"token punctuation\">;</span>  \n  \n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">AuthorizedRequest</span> authorizedRequest<span class=\"token punctuation\">;</span>  \n  \n    <span class=\"token annotation punctuation\">@Override</span>  \n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doFilterInternal</span><span class=\"token punctuation\">(</span>  \n            <span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span>  \n            <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">,</span>  \n            <span class=\"token class-name\">FilterChain</span> filterChain  \n    <span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>  \n  \n        <span class=\"token class-name\">String</span> method <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token class-name\">String</span> requestUri <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getRequestURI</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token class-name\">String</span> role <span class=\"token operator\">=</span> <span class=\"token function\">readUserRole</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  \n        <span class=\"token function\">validateUnauthorized</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">,</span> requestUri<span class=\"token punctuation\">,</span> role<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token function\">validateForbidden</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">,</span> requestUri<span class=\"token punctuation\">,</span> role<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  \n        filterChain<span class=\"token punctuation\">.</span><span class=\"token function\">doFilter</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n  \n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> <span class=\"token function\">readUserRole</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>  \n            <span class=\"token keyword\">return</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token constant\">USER_ROLE_ATTRIBUTE_KEY</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">NullPointerException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n            <span class=\"token keyword\">return</span> <span class=\"token constant\">EMPTY_ROLE</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token punctuation\">}</span>  \n    <span class=\"token punctuation\">}</span>  \n  \n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">validateUnauthorized</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> method<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> requestUri<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> role<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">hasAuthentication</span><span class=\"token punctuation\">(</span>role<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token function\">canAccess</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">,</span> requestUri<span class=\"token punctuation\">,</span> role<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ApisSecurityException</span><span class=\"token punctuation\">(</span><span class=\"token constant\">HTTP_UNAUTHORIZED</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token punctuation\">}</span>  \n    <span class=\"token punctuation\">}</span>  \n  \n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">validateForbidden</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> method<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> requestUri<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> role<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">hasAuthentication</span><span class=\"token punctuation\">(</span>role<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token function\">canAccess</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">,</span> requestUri<span class=\"token punctuation\">,</span> role<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ApisSecurityException</span><span class=\"token punctuation\">(</span><span class=\"token constant\">HTTP_FORBIDDEN</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token punctuation\">}</span>  \n    <span class=\"token punctuation\">}</span>  \n  \n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">hasAuthentication</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> role<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n        <span class=\"token keyword\">return</span> role<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token constant\">EMPTY_ROLE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n  \n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">canAccess</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> method<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> requestUri<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> role<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n        <span class=\"token keyword\">return</span> authorizedRequest<span class=\"token punctuation\">.</span><span class=\"token function\">matches</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">,</span> requestUri<span class=\"token punctuation\">,</span> role<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>여기서 주입받은 <code class=\"language-text\">AuthorizedRequest</code>는 <code class=\"language-text\">api</code>모듈 별로 각 요청에 접근 가능한 사용자의 권한들을 등록해 놓은 <code class=\"language-text\">Spring Bean</code>입니다. 이에 대한 내용은 뒤에서 더욱 자세히 다룰 예정이니 여기서는 어떤 역할을 하고 있는지만 대략 알고 넘어가면 좋을 것 같습니다.</p>\n<p>먼저 <code class=\"language-text\">HttpServletRequest</code>에서 요청의 <code class=\"language-text\">method</code>, <code class=\"language-text\">uri</code> 그리고 사용자의 권한을 읽어옵니다.</p>\n<p>그리고 읽어온 정보들과 <code class=\"language-text\">AuthorizedRequest</code>에 등록된 내용을 비교해 발생한 요청이 접근 가능한 요청인지 확인합니다.<br>\n접근 가능한 요청이 아니라면 <code class=\"language-text\">Unauthorized</code> 혹은 <code class=\"language-text\">Forbidden</code> 중 적절한 예외를 발생합니다.</p>\n<br>\n### AuthorizedRequest\n<p>제가 가장 공들인 <code class=\"language-text\">AuthorizedRequest</code>입니다.\n앞서 설명했던 것과 동일하게 모듈 별로 각 요청에 대해 접근 가능한 사용자의 권한들을 작성한 후 <code class=\"language-text\">Spring Bean</code>으로 등록하여 사용합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AuthorizedRequest</span> <span class=\"token punctuation\">{</span>  \n  \n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">MethodAndPattern</span> <span class=\"token constant\">NOT_REGISTERED</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MethodAndPattern</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Set</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"NOT_REGISTERED\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  \n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">AntPathMatcher</span> antPathMatcher<span class=\"token punctuation\">;</span>  \n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MethodAndPattern</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Roles</span><span class=\"token punctuation\">></span></span> registered<span class=\"token punctuation\">;</span>  \n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">boolean</span> isElseRequestPermit<span class=\"token punctuation\">;</span>  \n  \n    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">AuthorizedRequest</span><span class=\"token punctuation\">(</span>  \n            <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MethodAndPattern</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Roles</span><span class=\"token punctuation\">></span></span> registered<span class=\"token punctuation\">,</span>  \n            <span class=\"token keyword\">boolean</span> isElseRequestPermit  \n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>antPathMatcher <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AntPathMatcher</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>registered <span class=\"token operator\">=</span> registered<span class=\"token punctuation\">;</span>  \n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isElseRequestPermit <span class=\"token operator\">=</span> isElseRequestPermit<span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n  \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isAccessibleRequest</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> method<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> requestUri<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> role<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n        <span class=\"token class-name\">MethodAndPattern</span> matched <span class=\"token operator\">=</span> registered<span class=\"token punctuation\">.</span><span class=\"token function\">keySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  \n                <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>methodAndPattern <span class=\"token operator\">-></span>  \n                        methodAndPattern<span class=\"token punctuation\">.</span><span class=\"token function\">isRegistered</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpMethod</span><span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> requestUri<span class=\"token punctuation\">,</span> antPathMatcher<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  \n                <span class=\"token punctuation\">.</span><span class=\"token function\">findFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  \n                <span class=\"token punctuation\">.</span><span class=\"token function\">orElse</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NOT_REGISTERED</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  \n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>matched<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NOT_REGISTERED</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n            <span class=\"token keyword\">return</span> isElseRequestPermit<span class=\"token punctuation\">;</span>  \n        <span class=\"token punctuation\">}</span>  \n  \n        <span class=\"token keyword\">return</span> registered<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>matched<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isAccessibleRole</span><span class=\"token punctuation\">(</span>role<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">record</span> <span class=\"token class-name\">MethodAndPattern</span><span class=\"token punctuation\">(</span>  \n        <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">HttpMethod</span><span class=\"token punctuation\">></span></span> methods<span class=\"token punctuation\">,</span>  \n        <span class=\"token class-name\">String</span> pattern  \n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n  \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isRegistered</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpMethod</span> method<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> requestUri<span class=\"token punctuation\">,</span> <span class=\"token class-name\">AntPathMatcher</span> antPathMatcher<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n        <span class=\"token keyword\">return</span> antPathMatcher<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>pattern<span class=\"token punctuation\">,</span> requestUri<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> methods<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">record</span> <span class=\"token class-name\">Roles</span><span class=\"token punctuation\">(</span>  \n        <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> roles  \n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n  \n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">ANONYMOUS_ROLE</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"ROLE_ANONYMOUS\"</span><span class=\"token punctuation\">;</span>  \n  \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isAccessibleRole</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> enteredRole<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n        <span class=\"token keyword\">return</span> roles<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  \n                <span class=\"token punctuation\">.</span><span class=\"token function\">anyMatch</span><span class=\"token punctuation\">(</span>role <span class=\"token operator\">-></span>  \n                        <span class=\"token function\">checkPermitAll</span><span class=\"token punctuation\">(</span>role<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token function\">checkAuthenticated</span><span class=\"token punctuation\">(</span>role<span class=\"token punctuation\">,</span> enteredRole<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token function\">hasRole</span><span class=\"token punctuation\">(</span>role<span class=\"token punctuation\">,</span> enteredRole<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n  \n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">checkPermitAll</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> registeredRole<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n        <span class=\"token keyword\">return</span> registeredRole<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PERMIT_ALL</span><span class=\"token punctuation\">.</span><span class=\"token function\">getPattern</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n  \n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">checkAuthenticated</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> registeredRole<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> enteredRole<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n        <span class=\"token keyword\">return</span> registeredRole<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token constant\">AUTHENTICATED</span><span class=\"token punctuation\">.</span><span class=\"token function\">getPattern</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>enteredRole<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token constant\">ANONYMOUS_ROLE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n  \n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">hasRole</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> registeredRole<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> enteredRole<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n        <span class=\"token keyword\">return</span> registeredRole<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>enteredRole<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>uri 등록을 <code class=\"language-text\">AntPathStyle</code>을 사용하기 때문에 <code class=\"language-text\">AntMatcher</code>를 생성합니다.</p>\n<p><code class=\"language-text\">MethodAndPattern</code>은 이름 그대로 <code class=\"language-text\">method</code>와  <code class=\"language-text\">uri pattern</code>을 담고 있는 컬렉션입니다.<br>\n<code class=\"language-text\">isRegistered()</code>를 이용해 요청의 등록 여부를 확인할 수 있습니다.</p>\n<p><code class=\"language-text\">Roles</code>는 요청에 대해 접근 가능한 권한들을 모아둔 일급 컬렉션입니다.<br>\n<code class=\"language-text\">isAccessibleRole()</code>을 이용해 입력된 사용자의 권한이 접근 가능한 권한이지 확인합니다.</p>\n<p><code class=\"language-text\">Map&lt;MethodAndPattern, Roles></code>를 통해 이 두 컬렉션을 관리하고 있으며,<br>\n<code class=\"language-text\">isElseRequestPermit</code>에서 등록되지 않은 요청에 대한 \b허용 여부를 관리하고 있습니다.</p>\n<p><code class=\"language-text\">isAccessibleRequest()</code>에서 등록된 값들을 이용해 해당 요청이 접근 가능한 요청인지를 판단하고 그 결과를 제공하고 있습니다.</p>\n<p><code class=\"language-text\">AuthorizedRequest</code>는 별도의 <code class=\"language-text\">AuthorizedRequestBuilder</code>를 통해 다음과 같이 더욱 선언적으로 생성할 수 있습니다. 빌더에 대한 내용을 다루기엔 내용이 너무 많아 <a href=\"https://github.com/grida-diary/grida-server/blob/main/grida-apis/apis-security/src/main/java/org/grida/authorizedrequest/AuthorizedRequestBuilder.java\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">깃허브 저장소</a>를 참고해 주세요.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Bean</span>  \n<span class=\"token keyword\">public</span> <span class=\"token class-name\">AuthorizedRequest</span> <span class=\"token function\">authorizedRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">AuthorizedRequestBuilder</span><span class=\"token punctuation\">.</span><span class=\"token function\">withPatterns</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  \n            <span class=\"token punctuation\">.</span><span class=\"token function\">antMatchers</span><span class=\"token punctuation\">(</span>  \n                    <span class=\"token function\">allHttpMethods</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  \n                    <span class=\"token function\">uriPatterns</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/docs/**\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  \n                    <span class=\"token function\">permitAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  \n            <span class=\"token punctuation\">)</span>  \n            <span class=\"token punctuation\">.</span><span class=\"token function\">antMatchers</span><span class=\"token punctuation\">(</span>  \n                    <span class=\"token function\">httpMethods</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpMethod</span><span class=\"token punctuation\">.</span><span class=\"token constant\">POST</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  \n                    <span class=\"token function\">uriPatterns</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api/auth/login\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/api/auth/signup\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/api/auth/signup/email\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  \n                    <span class=\"token function\">permitAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  \n            <span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">antMatchers</span><span class=\"token punctuation\">(</span>  \n                    <span class=\"token function\">httpMethods</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpMethod</span><span class=\"token punctuation\">.</span><span class=\"token constant\">GET</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  \n                    <span class=\"token function\">uriPatterns</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api/auth/example\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  \n                    <span class=\"token function\">hasRoles</span><span class=\"token punctuation\">(</span><span class=\"token constant\">ROLE_ADMIN</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">ROLE_BASIC_USER</span><span class=\"token punctuation\">)</span>  \n            <span class=\"token punctuation\">)</span>   \n            <span class=\"token punctuation\">.</span><span class=\"token function\">antMatchers</span><span class=\"token punctuation\">(</span>  \n                    <span class=\"token function\">httpMethods</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpMethod</span><span class=\"token punctuation\">.</span><span class=\"token constant\">GET</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  \n                    <span class=\"token function\">uriPatterns</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api/auth/role\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  \n                    <span class=\"token function\">authenticated</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  \n            <span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">elseRequestAuthenticated</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<h3 id=\"authfilterexceptionhandler\" style=\"position:relative;\">AuthFilterExceptionHandler<a href=\"#authfilterexceptionhandler\" aria-label=\"authfilterexceptionhandler permalink\" class=\"heading-anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><code class=\"language-text\">Filter</code>에서 발생하는 예외는 <code class=\"language-text\">RestControllerAdvice</code>에서 감지하지 못하기 때문에 발생하는 예외를 핸들링할 필터를 추가로 구현해 주어야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AuthFilterExceptionHandler</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">OncePerRequestFilter</span> <span class=\"token punctuation\">{</span>  \n  \n    <span class=\"token annotation punctuation\">@Override</span>  \n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doFilterInternal</span><span class=\"token punctuation\">(</span>  \n            <span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span>  \n            <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">,</span>  \n            <span class=\"token class-name\">FilterChain</span> filterChain  \n    <span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>  \n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>  \n            filterChain<span class=\"token punctuation\">.</span><span class=\"token function\">doFilter</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ApisSecurityException</span> exception<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n            <span class=\"token class-name\">String</span> responseBody <span class=\"token operator\">=</span> <span class=\"token function\">createErrorResponse</span><span class=\"token punctuation\">(</span>exception<span class=\"token punctuation\">.</span><span class=\"token function\">getErrorCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n            <span class=\"token function\">sendErrorToClient</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">,</span> exception<span class=\"token punctuation\">.</span><span class=\"token function\">getErrorCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getHttpStatus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> responseBody<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   \n        <span class=\"token punctuation\">}</span>  \n    <span class=\"token punctuation\">}</span>  \n  \n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> <span class=\"token function\">createErrorResponse</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ErrorCode</span> errorCode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n        <span class=\"token class-name\">ObjectMapper</span> objectMapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectMapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  \n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>  \n            <span class=\"token class-name\">ApiResponse</span> errorResponse <span class=\"token operator\">=</span> <span class=\"token class-name\">ApiResponse</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>errorCode<span class=\"token punctuation\">,</span> <span class=\"token string\">\"ApiSecurityException\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n            <span class=\"token keyword\">return</span> objectMapper<span class=\"token punctuation\">.</span><span class=\"token function\">writeValueAsString</span><span class=\"token punctuation\">(</span>errorResponse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token punctuation\">}</span>  \n    <span class=\"token punctuation\">}</span>  \n  \n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sendErrorToClient</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> status<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> responseBody<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n        response<span class=\"token punctuation\">.</span><span class=\"token function\">setContentType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MediaType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">APPLICATION_JSON_VALUE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        response<span class=\"token punctuation\">.</span><span class=\"token function\">setCharacterEncoding</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        response<span class=\"token punctuation\">.</span><span class=\"token function\">setStatus</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  \n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>  \n            response<span class=\"token punctuation\">.</span><span class=\"token function\">getWriter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>responseBody<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token punctuation\">}</span>  \n    <span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>여기서 중요한 점은 <code class=\"language-text\">try-catch</code>를 이용해 예외 발생을 감지하기 때문에 <strong>반드시</strong> <code class=\"language-text\">AuthFilterExceptionHandler</code>의 우선순위가 <code class=\"language-text\">DecodeTokenFilter</code>, <code class=\"language-text\">AuthenticationFilter</code>보다 높아야 합니다.</p>\n<p>최종적으로 이 3개의 필터는<br>\n<code class=\"language-text\">AuthFilterExceptionHandler</code> -><code class=\"language-text\">DecodeTokenFilter</code> -> `AuthenticationFilter.<br>\n의 순서로 우선순위를 가져야만 합니다.</p>\n<br>\n<h3 id=\"argumentresolver\" style=\"position:relative;\">ArgumentResolver<a href=\"#argumentresolver\" aria-label=\"argumentresolver permalink\" class=\"heading-anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>세 개의 필터를 거치며 요청에 대한 권한 검증이 모두 완료되었다면 이제 컨트롤러에서 요청한 사용자의 정보를 확인할 수 있어야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PARAMETER</span><span class=\"token punctuation\">)</span>  \n<span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span><span class=\"token constant\">RUNTIME</span><span class=\"token punctuation\">)</span>  \n<span class=\"token annotation punctuation\">@Documented</span>  \n<span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">RequestUserEmail</span> <span class=\"token punctuation\">{</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserEmailResolver</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">HandlerMethodArgumentResolver</span> <span class=\"token punctuation\">{</span>  \n  \n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">USER_EMAIL_ATTRIBUTE_KEY</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"userEmail\"</span><span class=\"token punctuation\">;</span>  \n  \n\t<span class=\"token annotation punctuation\">@Override</span>  \n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">supportsParameter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MethodParameter</span> parameter<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n\t\t<span class=\"token keyword\">boolean</span> hasAnnotation <span class=\"token operator\">=</span> parameter<span class=\"token punctuation\">.</span><span class=\"token function\">hasParameterAnnotation</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RequestUserEmail</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t\t<span class=\"token keyword\">boolean</span> isStringValue <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">isAssignableFrom</span><span class=\"token punctuation\">(</span>parameter<span class=\"token punctuation\">.</span><span class=\"token function\">getParameterType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  \n\t\t<span class=\"token keyword\">return</span> hasAnnotation <span class=\"token operator\">&amp;&amp;</span> isStringValue<span class=\"token punctuation\">;</span>  \n\t<span class=\"token punctuation\">}</span>  \n  \n\t<span class=\"token annotation punctuation\">@Override</span>  \n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">resolveArgument</span><span class=\"token punctuation\">(</span>\n\t\t<span class=\"token class-name\">MethodParameter</span> parameter<span class=\"token punctuation\">,</span>  \n\t\t<span class=\"token class-name\">ModelAndViewContainer</span> mavContainer<span class=\"token punctuation\">,</span>  \n\t\t<span class=\"token class-name\">NativeWebRequest</span> webRequest<span class=\"token punctuation\">,</span>  \n\t\t<span class=\"token class-name\">WebDataBinderFactory</span> binderFactory\n\t<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>  \n  \n\t\t<span class=\"token class-name\">HttpServletRequest</span> request <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span><span class=\"token punctuation\">)</span> webRequest<span class=\"token punctuation\">.</span><span class=\"token function\">getNativeRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t\t<span class=\"token class-name\">HttpServletRequest</span> request <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span><span class=\"token punctuation\">)</span> webRequest<span class=\"token punctuation\">.</span><span class=\"token function\">getNativeRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>  \n\t\t\t<span class=\"token keyword\">return</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token constant\">USER_EMAIL_ATTRIBUTE_KEY</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">NullPointerException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n\t\t\t<span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ApisSecurityException</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NO_AUTHENTICATED_USER</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">@Annotation</code>과 <code class=\"language-text\">ArgunemtResolver</code>를 이용해 <code class=\"language-text\">@RequestBody</code>,<code class=\"language-text\">@RequestParam</code>과 유사하게 사용자의 이메일을 불러올 수 하였습니다.</p>\n<p><code class=\"language-text\">UserEmailResolver</code>\u001d가 <code class=\"language-text\">@RequestUserEmail</code>을 찾아 요청한 사용자의 이메일을 주입해주고 있습니다.</p>\n<p>컨트롤러에서는 다음과 같은 방법으로 사용할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/example\"</span><span class=\"token punctuation\">)</span>  \n<span class=\"token keyword\">public</span> <span class=\"token class-name\">ApiResponse</span> <span class=\"token function\">example</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestUserEmail</span> <span class=\"token class-name\">String</span> userEmail<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n\t<span class=\"token class-name\">ExampleResponse</span> response <span class=\"token operator\">=</span> exampleResponse<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>userEmail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t<span class=\"token keyword\">return</span> <span class=\"token class-name\">ApiResponse</span><span class=\"token punctuation\">.</span><span class=\"token function\">ok</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<h3 id=\"성능-측정\" style=\"position:relative;\">성능 측정<a href=\"#%EC%84%B1%EB%8A%A5-%EC%B8%A1%EC%A0%95\" aria-label=\"성능 측정 permalink\" class=\"heading-anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>간단한 성능 측정도 함께 해보았습니다.</p>\n<img width=\"680\" alt=\"테스트 코드\" src=\"https://github.com/wwan13/wwan13.github.io/assets/64270501/8cfe5302-6308-4a97-a91f-ece9218e6b8c\">\n<p><code class=\"language-text\">Spring Security</code>에서 사용하는 <code class=\"language-text\">SecurityContextHoder</code>와 제가 사용한 <code class=\"language-text\">HttpServletRequest</code>의 <code class=\"language-text\">Attribute</code>에서 읽기와 쓰기 성능을 테스트하는 간단한 테스트 코드입니다.</p>\n<img width=\"350\" alt=\"테스트 결과\" src=\"https://github.com/wwan13/wwan13.github.io/assets/64270501/1931003d-3e79-426b-b603-d5eeeab73854\">\n<p>10000회의 단순 읽기와 쓰기 작업만을 기준으로 측정하였을 때 꽤나 유의미한 수치로 <code class=\"language-text\">HttpServletRequest</code>의 <code class=\"language-text\">Attribute</code>가 우세한 성능을 보였습니다.\n<code class=\"language-text\">HttpServletRequest</code>를 초기화하는 과정까지 함께 측정한다면 동일한 조건에서 약 10배 정도의 차이로 <code class=\"language-text\">SecurityContextHolder</code>를 사용한 읽고 쓰기 성능이 우세했습니다. 하지만 요청을 처리하기 위해 <code class=\"language-text\">HttpServletRequest</code>를 생성하는 작업은 필연적으로 발생하기 때문에 결과적으로 <code class=\"language-text\">Spring Security</code>를 사용하는 것보다 성능상 우세하다는 것을 확인할 수 있습니다.</p>\n<br>\n<h3 id=\"버전--의존성\" style=\"position:relative;\">버전 &#x26; 의존성<a href=\"#%EB%B2%84%EC%A0%84--%EC%9D%98%EC%A1%B4%EC%84%B1\" aria-label=\"버전  의존성 permalink\" class=\"heading-anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>해당 포스팅은 저의 멀티모듈 구성 중 <code class=\"language-text\">Security</code>모듈에 구현되어 있는 내용만을 나타낸 것으로 해당 모듈의 의존성과 버전은 다음과 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\">// java 17\n// spring<span class=\"token punctuation\">-</span>boot 2.7.13\n\ndependencies <span class=\"token punctuation\">{</span>  \n    // web  \n    implementation 'org.springframework.boot<span class=\"token punctuation\">:</span>spring<span class=\"token punctuation\">-</span>boot<span class=\"token punctuation\">-</span>starter<span class=\"token punctuation\">-</span>web'  \n  \n    // jwt  \n    implementation 'io.jsonwebtoken<span class=\"token punctuation\">:</span>jjwt<span class=\"token punctuation\">-</span>api<span class=\"token punctuation\">:</span>0.11.5'  \n    runtimeOnly 'io.jsonwebtoken<span class=\"token punctuation\">:</span>jjwt<span class=\"token punctuation\">-</span>impl<span class=\"token punctuation\">:</span>0.11.5'  \n    runtimeOnly 'io.jsonwebtoken<span class=\"token punctuation\">:</span>jjwt<span class=\"token punctuation\">-</span>jackson<span class=\"token punctuation\">:</span>0.11.5'  \n  \n    // password encoder  \n    implementation 'org.springframework.security<span class=\"token punctuation\">:</span>spring<span class=\"token punctuation\">-</span>security<span class=\"token punctuation\">-</span>crypto<span class=\"token punctuation\">:</span>6.1.0'  \n  \n    // module dependencies  \n    implementation project('<span class=\"token punctuation\">:</span>grida<span class=\"token punctuation\">-</span>apis<span class=\"token punctuation\">:</span>apis<span class=\"token punctuation\">-</span>core')  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p><code class=\"language-text\">PasswordEncoder</code> 역시 <code class=\"language-text\">Spring Security</code>에 포함된 라이브러리라 직접 구현해야 하나 하는 고민도 있었지만, 결국 생산성을 위해 <code class=\"language-text\">PasswordEncoder</code>가 포함된 <code class=\"language-text\">spring-security-crypto</code>라이브러리만 의존하기로 하였습니다.</p>\n</blockquote>\n<br>\n<h2 id=\"마치며\" style=\"position:relative;\">마치며<a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B0\" aria-label=\"마치며 permalink\" class=\"heading-anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>처음엔 인증/인가 서버를 분리하고, 별도의 <code class=\"language-text\">gateway</code>를 통해 해결하고자 하였습니다. 하지만 이미 3개의 <code class=\"language-text\">api</code> 모듈과 <code class=\"language-text\">mysql</code>,<code class=\"language-text\">nginx</code>를 하나의 이 인스턴스에 띄워두고 있었기에, 추가 관리 비용이 발생하는 것을 원치 않았습니다.</p>\n<p>처음엔 <code class=\"language-text\">Filter</code>만 잘 이용하면 어렵지 않게 할 수 있을 거라 생각했지만 생각보다 고려해야 할 것이 너무나도 많았고 또 생각보다 구현하는데도 오래 걸렸습니다.</p>\n<p>아직까지 특별한 문제는 느끼지 못하였지만 누군가 다음 프로젝트에 또 이렇게 할 거냐고 묻는다면 흔쾌히 ‘예’라고 대답하진 못할 것 같습니다..</p>\n<p>여러분 스프링 라이브러리는 정말 위대합니다..!</p>","fields":{"slug":"/1003/"},"frontmatter":{"title":"Spring Security 없이 JWT 인증/인가 구현하는 방법.","date":"2024-02-12T00:00:00.000Z","description":"Spring Security를 사용하지 않고 JWT 인증/인가를 구현한 어느 주니어 개발자의 여행기.","tags":["Tech"],"thumbnail":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#e8c8b8","images":{"fallback":{"src":"/static/0beca7d37897b00b6eb665add59ab23f/8058b/thumbnail.png","srcSet":"/static/0beca7d37897b00b6eb665add59ab23f/52057/thumbnail.png 240w,\n/static/0beca7d37897b00b6eb665add59ab23f/b380a/thumbnail.png 480w,\n/static/0beca7d37897b00b6eb665add59ab23f/8058b/thumbnail.png 960w","sizes":"(min-width: 960px) 960px, 100vw"},"sources":[{"srcSet":"/static/0beca7d37897b00b6eb665add59ab23f/226ed/thumbnail.webp 240w,\n/static/0beca7d37897b00b6eb665add59ab23f/a1501/thumbnail.webp 480w,\n/static/0beca7d37897b00b6eb665add59ab23f/55375/thumbnail.webp 960w","type":"image/webp","sizes":"(min-width: 960px) 960px, 100vw"}]},"width":960,"height":720}}}}},"previous":{"fields":{"slug":"/1002/"},"frontmatter":{"title":"내가 원하는 예외가 아닌 HttpMessageNotReadableException만잡는다구요?"}},"next":{"fields":{"slug":"/1004/"},"frontmatter":{"title":"spring filter를 interceptor로 바꿔보기."}}},"pageContext":{"id":"1ca6a5e1-d63b-583d-bfcb-aad0cbdff23b","previousPostId":"fad04c1b-7de2-590d-9aca-0e794067a20e","nextPostId":"e246245a-f266-57b8-8148-0b1a768f3d4b"}},"staticQueryHashes":["2260143708","2538111481","658623446","984448874"],"slicesMap":{}}