<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Gatsby Starter Lavendar RSS Feed]]></title><description><![CDATA[주니어 백앤드 개발자 김태완 입니다.]]></description><link>https://wwan13.github.io</link><generator>GatsbyJS</generator><lastBuildDate>Wed, 01 May 2024 10:39:29 GMT</lastBuildDate><item><title><![CDATA[Spring Security 없이 JWT 인증/인가 구현 해보기]]></title><description><![CDATA[…]]></description><link>https://wwan13.github.io/without-spring-security/</link><guid isPermaLink="false">https://wwan13.github.io/without-spring-security/</guid><pubDate>Mon, 12 Feb 2024 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;객체를 &lt;code class=&quot;language-text&quot;&gt;Immutable&lt;/code&gt; 하게 생성 하는 것으로 많은 장점을 가지게 됩니다.&lt;/p&gt;
&lt;p&gt;한 번 생성 된 불변 객체는 그 값이 변하지 않기 때문에 우리는 이 객체에 더욱 신뢰할 수 있습니다. 또 멀티 쓰레드 환경에서 동기화 처리 없이 객체를 공유할 수 있다는 것도 하나의 장점입니다.&lt;/p&gt;
&lt;p&gt;그리고 저는 &lt;code class=&quot;language-text&quot;&gt;DTO&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;VO&lt;/code&gt;는 더더욱 불변으로 관리해야 한다고 생각하였습니다. 계층간 전달해야 할 값이 setter에 의해 변경 된다거나, properties와 같이 환경 변수 등의 변해선 안되는 값이 setter에 의해 언제든 변경될 수 있다면 그 값에 대한 신뢰가 떨어지기 마련입니다.&lt;/p&gt;
&lt;p&gt;하지만, 일반적인 상황에서 Spring의 모든 DTO를 Immutable 하게 관리 하기엔 꽤 많은 비용이 소모됩니다.&lt;/p&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id=&quot;immutable-한-dto&quot; style=&quot;position:relative;&quot;&gt;Immutable 한 DTO&lt;a href=&quot;#immutable-%ED%95%9C-dto&quot; aria-label=&quot;immutable 한 dto permalink&quot; class=&quot;heading-anchor after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;저는 Immutable 한 DTO를 만들기 위해 다음과 같은 코드를 작성하기로 하였습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Getter&lt;/span&gt;
&lt;span class=&quot;token annotation punctuation&quot;&gt;@RequireArgsConstructor&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MemberDto&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; age&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 DTO를 직렬화 즉 ResponseBody에 담아서 응답으로 보내주는 것에는 큰 문제 없습니다.&lt;/p&gt;
&lt;p&gt;하지만 이 DTO를 RequestBody로 받는 API에서는 다음과 같은 문제가 발생하게 됩니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/wwan13/wwan13.github.io/assets/64270501/cb6edc01-bce4-4a58-9c7b-e0d8e23a1ddf&quot; alt=&quot;실패 요청 결과&quot;&gt;&lt;/p&gt;
&lt;p&gt;그 원인은 &lt;code class=&quot;language-text&quot;&gt;ObjectMapper&lt;/code&gt;의 역직렬화 방법에 있습니다.&lt;/p&gt;
&lt;p&gt;ObjectMapper는 다음과 같은 방법으로 JSON 역직렬화를 수행합니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;BeanDeserializer.deserializeFromObject()&lt;/code&gt; 에서 기본 생성자를 이용한 리플렉션으로 DTO 객체를 생성합니다.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;FieldProperty.deserializeAndSet(...)&lt;/code&gt; 에서 리플렉선으로 얻어온 Filed에 JSON에서 얻은 값을 set 합니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;여기서 문제는 2번의 set입니다. 우리는 DTO의 모든 필드를 final로 선언하였기 때문에 set 과정을 수행할 수 없는 것입니다.&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;그래서 저는 일반적으로 다음과 같은 DTO를 작성하곤 했습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Getter&lt;/span&gt;
&lt;span class=&quot;token annotation punctuation&quot;&gt;@NoArgsConstructor&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MemberDto&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; age&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;필드를 final로 선언하지 않고, 기본 생성자와 getter를 가지고 있는 모습 입니다.&lt;/p&gt;
&lt;p&gt;이렇게 선언하면 다음과 같이 성공적으로 API를 호출 할 수 있게 됩니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/wwan13/wwan13.github.io/assets/64270501/1b4a1473-5075-4f93-8ec1-4e255e6ce5e9&quot; alt=&quot;성공 요청 결과&quot;&gt;&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;하지만 저의 관심사는 성공하는 DTO를 만드는게 아니라, Immutable한 DTO를 만드는 것입니다.
이 것을 &lt;code class=&quot;language-text&quot;&gt;@JsonProperty&lt;/code&gt;와 &lt;code class=&quot;language-text&quot;&gt;@JsonCreator&lt;/code&gt; 라는 어노테이션을 통해 다음과 같이 해결할 수 있습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Getter&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MemberDto&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	
	&lt;span class=&quot;token annotation punctuation&quot;&gt;@JsonPropertiey&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	
	&lt;span class=&quot;token annotation punctuation&quot;&gt;@JsonPropertiey&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;age&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; age&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;token annotation punctuation&quot;&gt;@JsonCreator&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mode &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;JsonCreator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Mode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;PROPERTIES&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MemberDto&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
		&lt;span class=&quot;token annotation punctuation&quot;&gt;@JsonPropertiey&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;token annotation punctuation&quot;&gt;@JsonPropertiey&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;age&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; age
	&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;age &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; age&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;우리는 이렇게 Immutable한 DTO를 얻을 수 있게 되었습니다.
하지만 추가로 작성해야 하는 어노테이션이 너무 많습니다. API 가 요청하는 필드가 많아지면 많아질 수록 더 많은 어노테이션을 작성해야 합니다.&lt;/p&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id=&quot;record를-이용해-immutable한-dto-만들기&quot; style=&quot;position:relative;&quot;&gt;Record를 이용해 Immutable한 DTO 만들기&lt;a href=&quot;#record%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%B4-immutable%ED%95%9C-dto-%EB%A7%8C%EB%93%A4%EA%B8%B0&quot; aria-label=&quot;record를 이용해 immutable한 dto 만들기 permalink&quot; class=&quot;heading-anchor after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Record&lt;/code&gt;는 Java 14 에서 추가된 클래스로 &lt;strong&gt;필드 유형과 이름만 필요한 불변 데이터 클래스&lt;/strong&gt; 입니다.
(Record에 대한 자세한 셜명은 &lt;a href=&quot;https://www.baeldung.com/java-record-keyword&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;baeldung&lt;/a&gt;에 잘 정리가 되어 있으니 이 글을 참고시면 됩니다.)&lt;/p&gt;
&lt;p&gt;Record를 이용하면 위 예시를 다음과 같이 간단하게 선언할 수 있습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;record&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MemberDto&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
		&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 
		&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; age
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;또한 특별한 어노테이션 없이 ObjectMapper를 통한 직렬화, 역직렬화를 수행할 수 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/wwan13/wwan13.github.io/assets/64270501/bd74c519-2bf6-40c6-80dc-259d897b84e3&quot; alt=&quot;record test&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/wwan13/wwan13.github.io/assets/64270501/3fac391a-efa9-41d2-94be-f6d859499645&quot; alt=&quot;record test 결과&quot;&gt;&lt;/p&gt;
&lt;p&gt;테스트를 통해 확인해 보면 문제 없이 역직렬화를 수행하는 것을 볼 수 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/wwan13/wwan13.github.io/assets/64270501/1b4a1473-5075-4f93-8ec1-4e255e6ce5e9&quot; alt=&quot;성공 요청 결과&quot;&gt;&lt;/p&gt;
&lt;p&gt;당연하게 API도 문제 없이 호출 됩니다.&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&quot;마치며&quot; style=&quot;position:relative;&quot;&gt;마치며&lt;a href=&quot;#%EB%A7%88%EC%B9%98%EB%A9%B0&quot; aria-label=&quot;마치며 permalink&quot; class=&quot;heading-anchor after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;이렇게 &lt;code class=&quot;language-text&quot;&gt;Record&lt;/code&gt;를 이용해 &lt;code class=&quot;language-text&quot;&gt;DTO&lt;/code&gt;를 조금 더 쉽게 &lt;code class=&quot;language-text&quot;&gt;Immutable&lt;/code&gt;한 상태로 관리할 수 있게 되었습니다.&lt;/p&gt;
&lt;p&gt;Record는 기존의 class DTO와 달리 getter나 기본 생성자 등을 추가로 구현하지 않아도 DTO로서의  동작을 수행 하기 때문에 개발자의 실수를 줄일 수 있다는 장점도 존재 합니다.
(실제로 실수로 기본 생성자를 빼먹어 삽질을 한 경우가 수 없이 존재한다..)&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Lazy Loading&lt;/code&gt;의 동작 방법 때문에 Record가 &lt;code class=&quot;language-text&quot;&gt;Entity&lt;/code&gt;로는 사용하지 못하지만, DTO 혹은 VO로 사용 하기엔 적합한 클래스 인 것 같아 앞으로도 유용하게 사용할 것 같습니다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[내가 원하는 예외가 아닌 HttpMessageNotReadableException만잡는다구요?]]></title><description><![CDATA[레코드를 DTO…]]></description><link>https://wwan13.github.io/why-only-unexpected-exception/</link><guid isPermaLink="false">https://wwan13.github.io/why-only-unexpected-exception/</guid><pubDate>Mon, 12 Feb 2024 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;레코드를 DTO로 사용하며 컴팩트 생성자를 이용해 요청 값에 대한 검증을 하려고 하였습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;record&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;LoginRequest&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;  
		&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; email&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;  
		&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; password  
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;  
  
	&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;LoginRequest&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;  
		&lt;span class=&quot;token function&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;email&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; email&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;  
		&lt;span class=&quot;token function&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;password&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; password&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;  
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;  
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; fieldName&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;  
	&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;StringUtils&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;hasText&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;  
		&lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;RequestFieldException&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;MUST_BE_REQUIRED&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; fieldName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;  
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;  
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;레코드의 컴팩트 생성자는 생성자 안에 있는 코드를 초기화 전에 호출해 줍니다. 그렇기 때문에 당연히 초기화 전에 예외가 발생하면 &lt;code class=&quot;language-text&quot;&gt;@RestControllerAdvice&lt;/code&gt;와 &lt;code class=&quot;language-text&quot;&gt;@ExceptionHandler&lt;/code&gt;에서 예외가 핸들링 되어 다음과 같은 응답이 오는 것을 예상하였습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token property&quot;&gt;&quot;timeStamp&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;2024-02-23 23:02:00&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;token property&quot;&gt;&quot;status&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;ERROR&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;token property&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;email 필드는 값이 없을 수 없습니다.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;token property&quot;&gt;&quot;cause&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;RequestFieldException&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;token property&quot;&gt;&quot;errorCode&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;MUST_BE_REQUIRED&quot;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;하지만 정작 제가 받은 응답은 아래의 응답 입니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/wwan13/wwan13.github.io/assets/64270501/c657b847-4293-4528-a31d-b06b2cb14412&quot; alt=&quot;wrong response&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;required()&lt;/code&gt;에서 던진 &lt;code class=&quot;language-text&quot;&gt;RequestFieldException&lt;/code&gt;이 아닌 &lt;code class=&quot;language-text&quot;&gt;DispatcherServlet&lt;/code&gt;이 던지는 &lt;code class=&quot;language-text&quot;&gt;HttpMessageNotReadableException&lt;/code&gt; 이 응답으로 오는 것입니다.&lt;/p&gt;
&lt;br&gt;
&lt;h3 id=&quot;뭐가-문제일까&quot; style=&quot;position:relative;&quot;&gt;뭐가 문제일까?&lt;a href=&quot;#%EB%AD%90%EA%B0%80-%EB%AC%B8%EC%A0%9C%EC%9D%BC%EA%B9%8C&quot; aria-label=&quot;뭐가 문제일까 permalink&quot; class=&quot;heading-anchor after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;원인은 &lt;code class=&quot;language-text&quot;&gt;Jackson&lt;/code&gt;이 &lt;code class=&quot;language-text&quot;&gt;Json&lt;/code&gt;을 &lt;code class=&quot;language-text&quot;&gt;Java&lt;/code&gt; 문법으로 역직렬화 하는 과정에 있었습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/wwan13/wwan13.github.io/assets/64270501/04f58ade-0f65-481c-8a3a-2c30b354b079&quot; alt=&quot;jackson StdValueInstantiator&quot;&gt;&lt;/p&gt;
&lt;p&gt;위 코드는 &lt;code class=&quot;language-text&quot;&gt;DispatcherServlet&lt;/code&gt;이 &lt;code class=&quot;language-text&quot;&gt;Json&lt;/code&gt;을 역직렬화 할 때 사용하는 &lt;code class=&quot;language-text&quot;&gt;Jackson&lt;/code&gt;라이브러리의 &lt;code class=&quot;language-text&quot;&gt;StdValueInstantiator&lt;/code&gt;입니다.&lt;/p&gt;
&lt;p&gt;코드에서 볼 수 있듯 &lt;code class=&quot;language-text&quot;&gt;Object&lt;/code&gt;를 생성하는 &lt;code class=&quot;language-text&quot;&gt;_withArgsCreator.call(args)&lt;/code&gt;에서 발생하는 모든 예외를 잡아 예외를 던지고 있습니다. 이때 &lt;code class=&quot;language-text&quot;&gt;DispatcherServlet&lt;/code&gt;은 이 예외를 &lt;code class=&quot;language-text&quot;&gt;HttpMessageNotReadableException&lt;/code&gt;으로 던지고 있었던 것입니다. 그래서 &lt;code class=&quot;language-text&quot;&gt;@RestControllerAdvice&lt;/code&gt;에서도 제가 의도한&lt;code class=&quot;language-text&quot;&gt;RequestFieldException&lt;/code&gt;가 아닌 &lt;code class=&quot;language-text&quot;&gt;HttpMessageNotReadableException&lt;/code&gt;를 잡아 클라이언트로 응답을 해 줬던 것이죠.&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;더 정확한 확인을 위해 생성자에 브레이크 포인트를 걸어 디버깅을 해보면&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/wwan13/wwan13.github.io/assets/64270501/4392262a-ec57-4d2d-afa8-4c6559c4a849&quot; alt=&quot;debug break point&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/wwan13/wwan13.github.io/assets/64270501/0c3907af-945b-4fa2-822f-6a08e7af7e88&quot; alt=&quot;debugging result&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;_withArgsCreator.call(args)&lt;/code&gt; 에서 예외가 발생해 catch 문으로 넘어가는 것을 볼 수 있었습니다.&lt;/p&gt;
&lt;br&gt;
&lt;h3 id=&quot;어떻게-해결하지&quot; style=&quot;position:relative;&quot;&gt;어떻게 해결하지?&lt;a href=&quot;#%EC%96%B4%EB%96%BB%EA%B2%8C-%ED%95%B4%EA%B2%B0%ED%95%98%EC%A7%80&quot; aria-label=&quot;어떻게 해결하지 permalink&quot; class=&quot;heading-anchor after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;원래 &lt;code class=&quot;language-text&quot;&gt;HttpMessageNotReadableException&lt;/code&gt;를 처리하던 &lt;code class=&quot;language-text&quot;&gt;exceptionHandler&lt;/code&gt;입니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@ExceptionHandler&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;HttpMessageNotReadableException&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;  
&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ResponseEntity&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ApiResponse&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;handleHttpMessageNotReadableException&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;  
&lt;span class=&quot;token class-name&quot;&gt;HttpMessageNotReadableException&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;  
	&lt;span class=&quot;token class-name&quot;&gt;ErrorCode&lt;/span&gt; errorCode &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;INVALID_HTTP_REQUEST&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;  
  
	&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ResponseEntity&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;errorCode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getHttpStatus&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;  
		&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ApiResponse&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getCause&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; errorCode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; errorCode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getMessage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;  
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;예외를 감지하면 그에 대응하는 적절한 응답을 주는 단순한 방법 이였습니다.&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;그리고 제가 이 문제를 해결한 코드입니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@ExceptionHandler&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;HttpMessageNotReadableException&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;  
&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ResponseEntity&lt;/span&gt;&lt;span class=&quot;token generics&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ApiResponse&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;handleHttpMessageNotReadableException&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;  
&lt;span class=&quot;token class-name&quot;&gt;HttpMessageNotReadableException&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;  
  
	&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getRootCause&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;RequestFieldException&lt;/span&gt; requestFieldException&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;  
		&lt;span class=&quot;token class-name&quot;&gt;ErrorCode&lt;/span&gt; requestFieltErrorCode &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; requestFieldException&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getErrorCode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;  
  
		&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ResponseEntity&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;requestFieltErrorCode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getHttpStatus&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;  
			&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ApiResponse&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;  
				&lt;span class=&quot;token function&quot;&gt;getCause&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;requestFieldException&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;  
				requestFieltErrorCode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;  
				requestFieldException&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getErrorMessage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;  
			&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;  
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;  
  
	&lt;span class=&quot;token class-name&quot;&gt;ErrorCode&lt;/span&gt; errorCode &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;INVALID_HTTP_REQUEST&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;  
  
	&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ResponseEntity&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;errorCode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getHttpStatus&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;  
		&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ApiResponse&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getCause&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; errorCode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; errorCode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getMessage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;  
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;e.getRootCause()&lt;/code&gt;를 이용해 예외가 발생한 원인을 불러왔습니다.&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;HttpMessageNotReadableException&lt;/code&gt;은 이 경우를 제외하고도 자주 발생할 수 있는 예외이기 때문에 &lt;code class=&quot;language-text&quot;&gt;rootCause&lt;/code&gt;가 &lt;code class=&quot;language-text&quot;&gt;RequestFieldException&lt;/code&gt;인 경우에 한해서만 별도의 응답을 제공하도록 하였습니다.&lt;/p&gt;
&lt;p&gt;그 결과 이제 제가 예상하던 응답을 확인할 수 있게 되었습니다!!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/wwan13/wwan13.github.io/assets/64270501/7af3a1d3-db81-4392-8ef5-f6bf297cb6d2&quot; alt=&quot;final response&quot;&gt;&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;한 가지 아쉬운 점은&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;LoginRequest&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;  
	&lt;span class=&quot;token function&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;email&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; email&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;  
	&lt;span class=&quot;token function&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;password&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; password&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;  
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;  &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;{필드명} 필드는 값이 없을 수 없습니다&lt;/code&gt; 와 같은 응답을 전달하기 위해 위 코드 처럼 필드 명을 함께 전달해야 해서 약간은 불편한 느낌이 없지 않아 있어 이 부분을 더 ‘깔꼼!’하게 해결할 수 있도록 해보겠습니다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Record를 DTO로 사용해 보자]]></title><description><![CDATA[…]]></description><link>https://wwan13.github.io/using-record-to-dto/</link><guid isPermaLink="false">https://wwan13.github.io/using-record-to-dto/</guid><pubDate>Sat, 27 Jan 2024 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;객체를 &lt;code class=&quot;language-text&quot;&gt;Immutable&lt;/code&gt; 하게 생성 하는 것으로 많은 장점을 가지게 됩니다.&lt;/p&gt;
&lt;p&gt;한 번 생성 된 불변 객체는 그 값이 변하지 않기 때문에 우리는 이 객체에 더욱 신뢰할 수 있습니다. 또 멀티 쓰레드 환경에서 동기화 처리 없이 객체를 공유할 수 있다는 것도 하나의 장점입니다.&lt;/p&gt;
&lt;p&gt;그리고 저는 &lt;code class=&quot;language-text&quot;&gt;DTO&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;VO&lt;/code&gt;는 더더욱 불변으로 관리해야 한다고 생각하였습니다. 계층간 전달해야 할 값이 setter에 의해 변경 된다거나, properties와 같이 환경 변수 등의 변해선 안되는 값이 setter에 의해 언제든 변경될 수 있다면 그 값에 대한 신뢰가 떨어지기 마련입니다.&lt;/p&gt;
&lt;p&gt;하지만, 일반적인 상황에서 Spring의 모든 DTO를 Immutable 하게 관리 하기엔 꽤 많은 비용이 소모됩니다.&lt;/p&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id=&quot;immutable-한-dto&quot; style=&quot;position:relative;&quot;&gt;Immutable 한 DTO&lt;a href=&quot;#immutable-%ED%95%9C-dto&quot; aria-label=&quot;immutable 한 dto permalink&quot; class=&quot;heading-anchor after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;저는 Immutable 한 DTO를 만들기 위해 다음과 같은 코드를 작성하기로 하였습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Getter&lt;/span&gt;
&lt;span class=&quot;token annotation punctuation&quot;&gt;@RequireArgsConstructor&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MemberDto&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; age&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 DTO를 직렬화 즉 ResponseBody에 담아서 응답으로 보내주는 것에는 큰 문제 없습니다.&lt;/p&gt;
&lt;p&gt;하지만 이 DTO를 RequestBody로 받는 API에서는 다음과 같은 문제가 발생하게 됩니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/wwan13/wwan13.github.io/assets/64270501/cb6edc01-bce4-4a58-9c7b-e0d8e23a1ddf&quot; alt=&quot;실패 요청 결과&quot;&gt;&lt;/p&gt;
&lt;p&gt;그 원인은 &lt;code class=&quot;language-text&quot;&gt;ObjectMapper&lt;/code&gt;의 역직렬화 방법에 있습니다.&lt;/p&gt;
&lt;p&gt;ObjectMapper는 다음과 같은 방법으로 JSON 역직렬화를 수행합니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;BeanDeserializer.deserializeFromObject()&lt;/code&gt; 에서 기본 생성자를 이용한 리플렉션으로 DTO 객체를 생성합니다.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;FieldProperty.deserializeAndSet(...)&lt;/code&gt; 에서 리플렉선으로 얻어온 Filed에 JSON에서 얻은 값을 set 합니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;여기서 문제는 2번의 set입니다. 우리는 DTO의 모든 필드를 final로 선언하였기 때문에 set 과정을 수행할 수 없는 것입니다.&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;그래서 저는 일반적으로 다음과 같은 DTO를 작성하곤 했습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Getter&lt;/span&gt;
&lt;span class=&quot;token annotation punctuation&quot;&gt;@NoArgsConstructor&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MemberDto&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; age&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;필드를 final로 선언하지 않고, 기본 생성자와 getter를 가지고 있는 모습 입니다.&lt;/p&gt;
&lt;p&gt;이렇게 선언하면 다음과 같이 성공적으로 API를 호출 할 수 있게 됩니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/wwan13/wwan13.github.io/assets/64270501/1b4a1473-5075-4f93-8ec1-4e255e6ce5e9&quot; alt=&quot;성공 요청 결과&quot;&gt;&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;하지만 저의 관심사는 성공하는 DTO를 만드는게 아니라, Immutable한 DTO를 만드는 것입니다.
이 것을 &lt;code class=&quot;language-text&quot;&gt;@JsonProperty&lt;/code&gt;와 &lt;code class=&quot;language-text&quot;&gt;@JsonCreator&lt;/code&gt; 라는 어노테이션을 통해 다음과 같이 해결할 수 있습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token annotation punctuation&quot;&gt;@Getter&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MemberDto&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	
	&lt;span class=&quot;token annotation punctuation&quot;&gt;@JsonPropertiey&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	
	&lt;span class=&quot;token annotation punctuation&quot;&gt;@JsonPropertiey&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;age&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; age&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;token annotation punctuation&quot;&gt;@JsonCreator&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mode &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;JsonCreator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Mode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;PROPERTIES&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MemberDto&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
		&lt;span class=&quot;token annotation punctuation&quot;&gt;@JsonPropertiey&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;token annotation punctuation&quot;&gt;@JsonPropertiey&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;age&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; age
	&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;age &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; age&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;우리는 이렇게 Immutable한 DTO를 얻을 수 있게 되었습니다.
하지만 추가로 작성해야 하는 어노테이션이 너무 많습니다. API 가 요청하는 필드가 많아지면 많아질 수록 더 많은 어노테이션을 작성해야 합니다.&lt;/p&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id=&quot;record를-이용해-immutable한-dto-만들기&quot; style=&quot;position:relative;&quot;&gt;Record를 이용해 Immutable한 DTO 만들기&lt;a href=&quot;#record%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%B4-immutable%ED%95%9C-dto-%EB%A7%8C%EB%93%A4%EA%B8%B0&quot; aria-label=&quot;record를 이용해 immutable한 dto 만들기 permalink&quot; class=&quot;heading-anchor after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Record&lt;/code&gt;는 Java 14 에서 추가된 클래스로 &lt;strong&gt;필드 유형과 이름만 필요한 불변 데이터 클래스&lt;/strong&gt; 입니다.
(Record에 대한 자세한 셜명은 &lt;a href=&quot;https://www.baeldung.com/java-record-keyword&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;baeldung&lt;/a&gt;에 잘 정리가 되어 있으니 이 글을 참고시면 됩니다.)&lt;/p&gt;
&lt;p&gt;Record를 이용하면 위 예시를 다음과 같이 간단하게 선언할 수 있습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;java&quot;&gt;&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;record&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MemberDto&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
		&lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 
		&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; age
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;또한 특별한 어노테이션 없이 ObjectMapper를 통한 직렬화, 역직렬화를 수행할 수 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/wwan13/wwan13.github.io/assets/64270501/bd74c519-2bf6-40c6-80dc-259d897b84e3&quot; alt=&quot;record test&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/wwan13/wwan13.github.io/assets/64270501/3fac391a-efa9-41d2-94be-f6d859499645&quot; alt=&quot;record test 결과&quot;&gt;&lt;/p&gt;
&lt;p&gt;테스트를 통해 확인해 보면 문제 없이 역직렬화를 수행하는 것을 볼 수 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/wwan13/wwan13.github.io/assets/64270501/1b4a1473-5075-4f93-8ec1-4e255e6ce5e9&quot; alt=&quot;성공 요청 결과&quot;&gt;&lt;/p&gt;
&lt;p&gt;당연하게 API도 문제 없이 호출 됩니다.&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&quot;마치며&quot; style=&quot;position:relative;&quot;&gt;마치며&lt;a href=&quot;#%EB%A7%88%EC%B9%98%EB%A9%B0&quot; aria-label=&quot;마치며 permalink&quot; class=&quot;heading-anchor after&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;이렇게 &lt;code class=&quot;language-text&quot;&gt;Record&lt;/code&gt;를 이용해 &lt;code class=&quot;language-text&quot;&gt;DTO&lt;/code&gt;를 조금 더 쉽게 &lt;code class=&quot;language-text&quot;&gt;Immutable&lt;/code&gt;한 상태로 관리할 수 있게 되었습니다.&lt;/p&gt;
&lt;p&gt;Record는 기존의 class DTO와 달리 getter나 기본 생성자 등을 추가로 구현하지 않아도 DTO로서의  동작을 수행 하기 때문에 개발자의 실수를 줄일 수 있다는 장점도 존재 합니다.
(실제로 실수로 기본 생성자를 빼먹어 삽질을 한 경우가 수 없이 존재한다..)&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Lazy Loading&lt;/code&gt;의 동작 방법 때문에 Record가 &lt;code class=&quot;language-text&quot;&gt;Entity&lt;/code&gt;로는 사용하지 못하지만, DTO 혹은 VO로 사용 하기엔 적합한 클래스 인 것 같아 앞으로도 유용하게 사용할 것 같습니다.&lt;/p&gt;</content:encoded></item></channel></rss>